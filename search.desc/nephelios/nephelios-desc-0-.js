searchState.loadedDescShard("nephelios", 0, "Entry point for the application.\nGauge vector tracking CPU usage per container.\nGauge vector tracking memory usage per container.\nGauge vector tracking network input per container.\nGauge vector tracking network output per container.\nGlobal Prometheus registry used to register all custom …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates the route for app creation.\nCreates the route for metrics.\nReturns the argument unchanged.\nCreates the route for listing deployed apps.\nHandles the app creation logic.\nHandles the app listing request.\nHandles the metrics request.\nHandles the app removal logic.\nHandles the app start logic.\nHandles the app stop logic.\nCreates the route for health checks.\nCalls <code>U::from(self)</code>.\nCreates the route for app removal.\nCreates the route for starting an app.\nCreates the route for stopping an app.\nBuilds a Docker image using the tarball created from the …\nChecks if Docker Swarm is active.\nConnects the Nephelios container to the <code>nephelios_overlay</code> …\nCreates a Docker context tarball for the specified …\nDeploys the Nephelios stack using the <code>docker stack deploy</code> …\nRuns the Docker Compose command to deploy the application. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates and writes a Dockerfile for the given …\nRetrieves the status of the specified application.\nInitializes Docker Swarm with the given IP address.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the specified application is currently running.\nChecks if the application is in the “stopping” state …\nLeaves the Docker Swarm.\nLists all deployed applications in the Nephelios stack.\nParses a human-readable data size string into kilobytes.\nParses memory usage from a Docker-formatted string.\nParses the network I/O string from Docker stats.\nParses a percentage string like “42.5%” into a …\nPrunes unused Docker images.\nPushes a Docker image to a remote registry.\nRemoves the container for the given application.\nStops the Nephelios stack by removing the Docker stack.\nConverts the metadata to a HashMap of labels for Docker.\nUpdates Prometheus metrics by parsing <code>docker stats</code> for …\nClones a GitHub repository into a specified directory.\nCreates a temporary directory in the user’s home folder …\nModifies the GitHub URL to include the specified username.\nRemoves the temporary directory and its contents from the …\nAdds the application to the Traefik configuration.\nRemoves the docker-compose configuration for the given …\nUpdates the number of replicas for an application in the …\nVerifies if the application is already deployed.\nReturns the argument unchanged.\nHandles individual WebSocket connections.\nCalls <code>U::from(self)</code>.\nSends a deployment status update through the broadcast …\nCreates a WebSocket route for handling real-time …")