(function() {
    var type_impls = Object.fromEntries([["nephelios",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Clone-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Sender&lt;T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","nephelios::services::websocket::StatusSender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Debug-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","nephelios::services::websocket::StatusSender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Drop-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.86.0/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","nephelios::services::websocket::StatusSender"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; Sender&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">new</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; Sender&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates the sending-half of the <a href=\"crate::sync::broadcast\"><code>broadcast</code></a> channel.</p>\n<p>See the documentation of <a href=\"crate::sync::broadcast::channel\"><code>broadcast::channel</code></a> for more information on this method.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.send\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">send</a>(&amp;self, value: T) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>, SendError&lt;T&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to send a value to all active <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handles, returning\nit back if it could not be sent.</p>\n<p>A successful send occurs when there is at least one active <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a>\nhandle. An unsuccessful send would be one where all associated\n<a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handles have already been dropped.</p>\n<h5 id=\"return\"><a class=\"doc-anchor\" href=\"#return\">§</a>Return</h5>\n<p>On success, the number of subscribed <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handles is returned.\nThis does not mean that this number of receivers will see the message as\na receiver may drop or lag (<a href=\"self#lagging\">see lagging</a>) before receiving\nthe message.</p>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<p>A return value of <code>Ok</code> <strong>does not</strong> mean that the sent value will be\nobserved by all or any of the active <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handles. <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a>\nhandles may be dropped before receiving the sent message.</p>\n<p>A return value of <code>Err</code> <strong>does not</strong> mean that future calls to <code>send</code>\nwill fail. New <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handles may be created by calling\n<a href=\"crate::sync::broadcast::Sender::subscribe\"><code>subscribe</code></a>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, <span class=\"kw-2\">mut </span>rx1) = broadcast::channel(<span class=\"number\">16</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rx2 = tx.subscribe();\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"macro\">assert_eq!</span>(rx1.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">10</span>);\n        <span class=\"macro\">assert_eq!</span>(rx1.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">20</span>);\n    });\n\n    tokio::spawn(<span class=\"kw\">async move </span>{\n        <span class=\"macro\">assert_eq!</span>(rx2.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">10</span>);\n        <span class=\"macro\">assert_eq!</span>(rx2.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">20</span>);\n    });\n\n    tx.send(<span class=\"number\">10</span>).unwrap();\n    tx.send(<span class=\"number\">20</span>).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.subscribe\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">subscribe</a>(&amp;self) -&gt; Receiver&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Creates a new [<code>Receiver</code>] handle that will receive values sent <strong>after</strong>\nthis call to <code>subscribe</code>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, _rx) = broadcast::channel(<span class=\"number\">16</span>);\n\n    <span class=\"comment\">// Will not be seen\n    </span>tx.send(<span class=\"number\">10</span>).unwrap();\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rx = tx.subscribe();\n\n    tx.send(<span class=\"number\">20</span>).unwrap();\n\n    <span class=\"kw\">let </span>value = rx.recv().<span class=\"kw\">await</span>.unwrap();\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">20</span>, value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downgrade\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">downgrade</a>(&amp;self) -&gt; WeakSender&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the <code>Sender</code> to a [<code>WeakSender</code>] that does not count\ntowards RAII semantics, i.e. if all <code>Sender</code> instances of the\nchannel were dropped and only <code>WeakSender</code> instances remain,\nthe channel is closed.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of queued values.</p>\n<p>A value is queued until it has either been seen by all receivers that were alive at the time\nit was sent, or has been evicted from the queue by subsequent sends that exceeded the\nqueue’s capacity.</p>\n<h5 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">§</a>Note</h5>\n<p>In contrast to [<code>Receiver::len</code>], this method only reports queued values and not values that\nhave been evicted from the queue before being seen by all receivers.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, <span class=\"kw-2\">mut </span>rx1) = broadcast::channel(<span class=\"number\">16</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rx2 = tx.subscribe();\n\n    tx.send(<span class=\"number\">10</span>).unwrap();\n    tx.send(<span class=\"number\">20</span>).unwrap();\n    tx.send(<span class=\"number\">30</span>).unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(tx.len(), <span class=\"number\">3</span>);\n\n    rx1.recv().<span class=\"kw\">await</span>.unwrap();\n\n    <span class=\"comment\">// The len is still 3 since rx2 hasn't seen the first value yet.\n    </span><span class=\"macro\">assert_eq!</span>(tx.len(), <span class=\"number\">3</span>);\n\n    rx2.recv().<span class=\"kw\">await</span>.unwrap();\n\n    <span class=\"macro\">assert_eq!</span>(tx.len(), <span class=\"number\">2</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if there are no queued values.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, <span class=\"kw-2\">mut </span>rx1) = broadcast::channel(<span class=\"number\">16</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rx2 = tx.subscribe();\n\n    <span class=\"macro\">assert!</span>(tx.is_empty());\n\n    tx.send(<span class=\"number\">10</span>).unwrap();\n\n    <span class=\"macro\">assert!</span>(!tx.is_empty());\n\n    rx1.recv().<span class=\"kw\">await</span>.unwrap();\n\n    <span class=\"comment\">// The queue is still not empty since rx2 hasn't seen the value.\n    </span><span class=\"macro\">assert!</span>(!tx.is_empty());\n\n    rx2.recv().<span class=\"kw\">await</span>.unwrap();\n\n    <span class=\"macro\">assert!</span>(tx.is_empty());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.receiver_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">receiver_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of active receivers.</p>\n<p>An active receiver is a <a href=\"crate::sync::broadcast::Receiver\"><code>Receiver</code></a> handle returned from <a href=\"crate::sync::broadcast::channel\"><code>channel</code></a> or\n<a href=\"crate::sync::broadcast::Sender::subscribe\"><code>subscribe</code></a>. These are the handles that will receive values sent on\nthis <a href=\"crate::sync::broadcast::Sender\"><code>Sender</code></a>.</p>\n<h5 id=\"note-2\"><a class=\"doc-anchor\" href=\"#note-2\">§</a>Note</h5>\n<p>It is not guaranteed that a sent message will reach this number of\nreceivers. Active receivers may never call <a href=\"crate::sync::broadcast::Receiver::recv\"><code>recv</code></a> again before\ndropping.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, _rx1) = broadcast::channel(<span class=\"number\">16</span>);\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, tx.receiver_count());\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>_rx2 = tx.subscribe();\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"number\">2</span>, tx.receiver_count());\n\n    tx.send(<span class=\"number\">10</span>).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.same_channel\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">same_channel</a>(&amp;self, other: &amp;Sender&lt;T&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if senders belong to the same channel.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, _rx) = broadcast::channel::&lt;()&gt;(<span class=\"number\">16</span>);\n    <span class=\"kw\">let </span>tx2 = tx.clone();\n\n    <span class=\"macro\">assert!</span>(tx.same_channel(<span class=\"kw-2\">&amp;</span>tx2));\n\n    <span class=\"kw\">let </span>(tx3, _rx3) = broadcast::channel::&lt;()&gt;(<span class=\"number\">16</span>);\n\n    <span class=\"macro\">assert!</span>(!tx3.same_channel(<span class=\"kw-2\">&amp;</span>tx2));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.closed\" class=\"method\"><h4 class=\"code-header\">pub async fn <a class=\"fn\">closed</a>(&amp;self)</h4></section></summary><div class=\"docblock\"><p>A future which completes when the number of [Receiver]s subscribed to this <code>Sender</code> reaches\nzero.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>futures::FutureExt;\n<span class=\"kw\">use </span>tokio::sync::broadcast;\n\n<span class=\"attr\">#[tokio::main]\n</span><span class=\"kw\">async fn </span>main() {\n    <span class=\"kw\">let </span>(tx, <span class=\"kw-2\">mut </span>rx1) = broadcast::channel::&lt;u32&gt;(<span class=\"number\">16</span>);\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rx2 = tx.subscribe();\n\n    <span class=\"kw\">let _ </span>= tx.send(<span class=\"number\">10</span>);\n\n    <span class=\"macro\">assert_eq!</span>(rx1.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">10</span>);\n    drop(rx1);\n    <span class=\"macro\">assert!</span>(tx.closed().now_or_never().is_none());\n\n    <span class=\"macro\">assert_eq!</span>(rx2.recv().<span class=\"kw\">await</span>.unwrap(), <span class=\"number\">10</span>);\n    drop(rx2);\n    <span class=\"macro\">assert!</span>(tx.closed().now_or_never().is_some());\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.strong_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">strong_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of [<code>Sender</code>] handles.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.weak_count\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">weak_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of [<code>WeakSender</code>] handles.</p>\n</div></details></div></details>",0,"nephelios::services::websocket::StatusSender"],["<section id=\"impl-Send-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Send-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for Sender&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Send","nephelios::services::websocket::StatusSender"],["<section id=\"impl-Sync-for-Sender%3CT%3E\" class=\"impl\"><a href=\"#impl-Sync-for-Sender%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for Sender&lt;T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a>,</div></h3></section>","Sync","nephelios::services::websocket::StatusSender"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[20835]}